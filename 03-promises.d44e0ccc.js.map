{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAMC,iBACN,MACEC,UAAUC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,eAWZ,SAAuBC,EAAUJ,GAC/B,MAAMK,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,uBAAqBL,QAAiBJ,OAE5CU,EAAK,sBAAoBN,QAAeJ,MAAU,GAErDA,EAAM,G,EAlBXY,CAAcV,EAAOW,MAAOb,EAAMa,OAC/BC,MAAKL,IACJM,EAAAvB,GAASwB,OAAOC,QAAQR,EAAQ,IAEjCS,OAAMC,IACLJ,EAAAvB,GAASwB,OAAOI,QAAQD,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', createPromiseBtn);\n\nfunction createPromiseBtn(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  createPromise(amount.value, delay.value)\n    .then(resolve => {\n      Notiflix.Notify.success(resolve);\n    })\n    .catch(error => {\n      Notiflix.Notify.failure(error);\n    });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","event","preventDefault","elements","delay","step","amount","currentTarget","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","value","then","$parcel$interopDefault","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.d44e0ccc.js.map"}